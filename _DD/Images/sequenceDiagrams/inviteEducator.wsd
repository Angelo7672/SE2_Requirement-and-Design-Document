@startuml

autonumber

actor Invting_Educator as U1
participant First_Firewall as FF
participant WebServer as WS
participant Second_Firewall as SF
participant Application_Server as AS
participant Microservices_Dispatcher as MD
entity tournamentManagerInterface as TMI
participant TournamentManager as TM
entity logInManagerInterface as LMI
participant LogInManager as LM
entity searchManagerInterface as SMI
participant searchnManager as SM
entity notificationManagerInterface as NMI
participant NotificationManager as NM
participant Firewall as F
participant EmailProvider as EP
actor Invited_Educator as U2


activate U1
activate FF
activate WS
activate SF
activate AS
activate MD
MD-->LMI: logInManager.isLogged(email)
activate LMI
activate LM
LMI-->LM: isLogged(email)
deactivate LMI
U1 --> FF: Json(inviteEducator(myemail, emailToInvite))
FF-->WS: analizer(socket, Json): Json
WS-->SF: verifyLoggedClient(socket)
SF-->AS: analizer(socket, Json): Json
AS-->MD: parser(Json): response

alt if Invited Educator and Tournament exists
    LM-->MD: True: the User is logged properly and it is a Student
    MD-->SMI: Microdispatcher.searchUser(email)
    SMI-->SM: searchUser(email)
    SM-->MD: List<AccountManager>.count == 1 and AccountManager.type = Educator
    MD-->SMI: Microdispatcher.searchUser(email)
else if Invited Educator does not exist or it is not an Educator or wrong data
else if Tournament doen not exist or wrong data
else if Inviting Educator not logged
end 


@enduml