@startuml

autonumber

actor "Invited Educator" as U2
actor "Inviting Educator" as U1
participant EmailProvider as EP
participant WebServerModule as WS
participant Controller as C
participant TournamentManager as TM
participant NotificationManager as NM
participant DBMSManager as DBMS

activate U1
U1 -> WS: POST /api/inviteEducator
deactivate U1
activate WS
WS -> C: addEducator(educator: Educator,\n tournament: Tournament): Void
deactivate WS
activate C
C -> TM: addEducator(educator: Educator,\n tournament: Tournament): Void
deactivate C
activate TM
TM -> DBMS: query(query: String, args: List<String>): QueryResult
activate DBMS
note right
    check if Educator 
    is already in 
    the Tournament
end note
DBMS --> TM: QueryResult
deactivate DBMS
alt QueryResult is not NULL
    TM -> NM: sendNotification(notification: Notification): Void
    deactivate TM
    activate NM
    NM -> EP: send email with text
    deactivate NM
    activate EP
    EP -> U2: Email <<Invitation sent>>
    deactivate EP
    activate U2
    alt Educator accepts Invitation
        U2 -> WS: POST /api/confirm
        deactivate U2
        activate WS
        WS -> C: receiveResponse(response: Response): Void
        deactivate WS
        activate C
        C -> NM: receiveResponse(response: Response): Void
        deactivate C
        activate NM
        NM -> TM: joinEducator(educator: Educator,\n tournament: Tournament): Void
        deactivate NM
        activate TM
        TM -> DBMS: query(query: String, args: List<String>): QueryResult
        activate DBMS
        note right
            add Educator 
            to Tournament
        end note
        DBMS --> TM: QueryResult
        deactivate DBMS
        deactivate TM
    else Educator refuses Invitation
    end
else QueryResult is NULL
    TM -> NM: sendNotification(notification: Notification): Void
    activate NM
    NM -> EP: send email with text
    deactivate NM
    activate EP
    EP -> U1: Email <<Invitation NOT sent,\n error occurred>>
    deactivate EP
end

@enduml