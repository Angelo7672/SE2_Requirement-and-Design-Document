@startuml

autonumber
actor Educator as U
participant First_Firewall as FF
participant WebServer as WS
participant Second_Firewall as SF
participant Application_Server as AS
participant Microservices_Dispatcher as MD
participant TournamentManager as TM
entity logInManagerInterface as LMI
participant LogInManager as LM

activate U
activate FF
activate WS
activate SF
activate AS
U-->FF: createATournament(Json(Name, overview, RMP, evaluationMode, email))
FF-->WS: analizer(socket, Json): Json
WS-->SF: verifyLoggedClient(socket)
SF-->AS: analizer(socket, Json): Json
AS-->MD: parser(Json): response
activate MD
MD-->LMI: logInManager.isLogged(email)
activate LMI
activate LM
LMI-->LM: isLogged(email)
deactivate LMI
alt if Tournament is created
    LM-->MD: True: the User is logged properly and he/she is an Educator
    MD-->TM: MicroserviceDispatcher.createTournament(Name,overview, RMP, evaluationMode, email)
    activate TM
    TM-->MD: True: Tournament is created
    deactivate TM
    MD-->AS: Tournament created
    AS-->WS: Json(Tournament created)
    WS-->U: Tournament successfully created
else  data provided are incorrect or Tournament already exists
    LM-->MD: True: the User is logged properly and it is an Educator
    MD-->AS: Tournament not created, Tournament already exists
    AS-->WS: Json(Tournament NOT created)
    WS-->U: Tournament NOT created
else User is not an Educator or is not logged
    LM-->MD: False: the User is not logged properly or he/she is not an Educator
    deactivate LM
    MD-->AS: Tournament NOT created, User NOT logged properly 
    deactivate MD
    AS-->WS: Json(Tournament NOT created)
    WS-->U: Tournament NOT created
end
deactivate U
deactivate FF
deactivate WS
deactivate SF
deactivate AS
@enduml