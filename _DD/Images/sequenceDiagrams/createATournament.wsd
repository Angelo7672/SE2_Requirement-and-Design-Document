@startuml

autonumber
actor Educator as U
participant First_Firewall as FF
participant WebServer as WS
participant Second_Firewall as SF
participant Application_Server as AS
participant Microservices_Dispatcher as MD
participant TournamentManager as TM
entity logInManagerInterface as LMI
participant LogInManager as LM
entity notificationManagerInterface as NMI
participant NotificationManager as NM
participant Firewall as F
participant EmailProvider as EP
actor Students as S

activate U
activate FF
activate WS
activate SF
activate AS
U-->FF: createATournament(Json(Name, overview, RMP, evaluationMode, email))
FF-->WS: analizer(socket, Json): Json
WS-->SF: verifyLoggedClient(socket)
SF-->AS: analizer(socket, Json): Json
AS-->MD: parser(Json): response
activate MD
MD-->LMI: logInManager.isLogged(email)
activate LMI
activate LM
LMI-->LM: isLogged(email)
deactivate LMI
alt if Tournament is created
    LM-->MD: True: the User is logged properly and he/she is an Educator
    MD-->TM: MicroserviceDispatcher.createTournament(Name,overview, RMP, evaluationMode, email)
    activate TM
    TM-->MD: True: Tournament is created
    deactivate TM
    MD-->NMI: MicroserviceDispatcher.sendNotification(List<String> emails, description)
    activate NMI
    NMI-->NM: sendNotification(List<String> emails, description)
    deactivate NMI
    activate NM
    NM->F: sendEmail
    deactivate NM
    activate F
    F->EP: sendEmail
    deactivate F
    activate EP
    EP-->U: Email <<Tournament successfully created>>
    EP-->S: Email <<New Tournament is available>>
    deactivate EP
else  data provided are incorrect or Tournament already exists
    LM-->MD: True: the User is logged properly and it is an Educator
    MD-->NMI: MicroserviceDispatcher.sendNotification(List<String> emails, description)
    activate NMI
    NMI-->NM: sendNotification(List<String> emails, description)
    deactivate NMI
    activate NM
    NM->F: sendEmail
    deactivate NM
    activate F
    F->EP: sendEmail
    deactivate F
    activate EP
    EP-->U: Email <<Tournament not created, already exists>>
    deactivate EP
else User is not an Educator or is not logged
    LM-->MD: False: the User is not logged properly or he/she is not an Educator
    deactivate LM
    MD-->AS: Tournament NOT created, User NOT logged properly 
    deactivate MD
    AS-->WS: Json(NO Educator logged)
    WS-->U: NO Educator logged
end
deactivate U
deactivate FF
deactivate WS
deactivate SF
deactivate AS
@enduml