@startuml

autonumber

actor Student as S
participant EmailProvider as EP
participant WebServerModule as WS
participant Controller as C
participant TournamentManager as TM
participant NotificationManager as NM
participant DBMSManager as DBMSM

activate S
S -> WS: GET /api/tournamentData
activate WS
WS -> C: getTournamentData(\ntournament: Tournament): Tournament
activate C
C -> DBMSM: query(query: String, args: List<String>): QueryResult
activate DBMSM
DBMSM --> C: QueryResult
deactivate DBMSM
C --> WS: Tournament
deactivate C
WS --> S: Tournament
deactivate WS
S -> WS: POST /api/joinTournament
activate WS
WS -> C: createTeam(team: Team, student: Student): Tournament Page
activate C
C -> TM: createTeam(team: Team, student: Student): Tournament Page
activate TM
TM -> DBMSM: query(query: String, args: List<String>): QueryResult
activate DBMSM
DBMSM --> TM: QueryResult
deactivate DBMSM
alt if QueryResult is NULL
    TM -> DBMSM: query(query: String, args: List<String>): QueryResult
    activate DBMSM
    note right
        team is 
        inserted in 
        the tournament 
    end note
    DBMSM --> TM: QueryResult
    deactivate DBMSM
    TM -> TM: joinStudentTournament(student: Student, team: Team): Void
    TM -> DBMSM: query(query: String, args: List<String>): QueryResult
    activate DBMSM
    note right
        student is 
        inserted in 
        the team 
    end note
    DBMSM --> TM: QueryResult
    deactivate DBMSM
    TM -> NM: sendNotification(\nnotification: Notification): Void
    activate NM
    NM -> EP: email with text
    deactivate NM
    activate EP
    EP -> S: email\n <<subscritpion confirmation>>
    deactivate EP
    TM --> C: Tournament Page
    deactivate TM
    C --> WS: Tournament Page
    deactivate C
    WS --> S: Tournament Page
    deactivate WS
else if Team is NOT NULL
    TM -> C: Exception: Team already exists
    activate C
    C -> WS: Exception: Team already exists
    deactivate C
    activate WS
    WS -> S: Exception: Team already exists
    deactivate WS
end

@enduml