@startuml

autonumber
actor Educator as U
participant First_Firewall as FF
participant WebServer as WS
participant Second_Firewall as SF
participant Application_Server as AS
participant Microservices_Dispatcher as MD
entity tournamentManagerInterface as TMI
participant TournamentManager as TM
entity logInManagerInterface as LMI
participant LogInManager as LM
entity notificationManagerInterface as NMI
participant NotificationManager as NM
participant Firewall as F
participant EmailProvider as EP

activate U
activate FF
activate WS
activate SF
activate AS
U-->FF: joinATournament(Json(email, Team))
FF-->WS: analizer(socket, Json): Json
WS-->SF: verifyLoggedClient(socket)
SF-->AS: analizer(socket, Json): Json
AS-->MD: parser(Json): response
activate MD
MD-->LMI: logInManager.isLogged(email)
activate LMI
activate LM
LMI-->LM: isLogged(email)
deactivate LMI
alt if Tournament joined successful
    LM-->MD: True: the User is logged properly and he/she is an Educator
    activate TMI
    MD-->TMI: TournamentManager.joinTournament(email, Team)
    TMI-->TM: joinTournament(email, Team)
    deactivate TMI
    activate TM
    TM-->MD: True: Tournament is joined
    deactivate TM
    deactivate TM
    MD-->NMI: MicroserviceDispatcher.sendNotification(email, description)
    activate NMI
    NMI-->NM: sendNotification(email, description)
    deactivate NMI
    activate NM
    NM->F: sendEmail
    deactivate NM
    activate F
    F->EP: sendEmail
    deactivate F
    activate EP
    EP-->U: Email <<Tournament joined>>
    deactivate EP
    MD-->AS: Tournament joined
    AS-->WS: Json(Tournament joined)
    WS-->U: Tournament successfully joined
else  Tournament already joined or Team does not exists
    LM-->MD: True: the User is logged properly and it is a Student
    MD-->TMI: TournamentManager.joinTournament(email, Team)
    TMI-->TM: joinTournament(email, Team)
    activate TM
    TM-->MD: False: Tournament already joined
    deactivate TMI
    deactivate TM
    MD-->NMI: MicroserviceDispatcher.sendNotification(email, description)
    activate NMI
    NMI-->NM: sendNotification(email, description)
    deactivate NMI
    activate NM
    NM->F: sendEmail
    deactivate NM
    activate F
    F->EP: sendEmail
    deactivate F
    activate EP
    EP-->U: Email <<Tournament joined>>
    deactivate EP
    activate TM
    TM-->MD: False: Tournament is already joined/Team doen not exists
    deactivate TM
    MD-->AS: Tournament already joined/Team doen not exists
    AS-->WS: Json(Tournament already joined/Team doen not exists)
    WS-->U: Tournament already joined/Team doen not exists
else User is not a Student or is not logged
    LM-->MD: False: the User is not logged properly or he/she is not an Educator
    deactivate LM
    MD-->AS: Tournament NOT joined, User NOT logged properly 
    deactivate MD
    AS-->WS: Json(Tournament NOT joined)
    WS-->U: Tournament NOT joined
end
deactivate U
deactivate FF
deactivate WS
deactivate SF
deactivate AS
@enduml