@startuml

autonumber
autoactivate  on

'actor Inviting_Student as U1
'participant First_Firewall as FF
'participant WebServer as WS
'participant Second_Firewall as SF
'participant Application_Server as AS
'participant Microservices_Dispatcher as MD
'entity logInManagerInterface as LMI
'participant LogInManager as LM
'entity searchManagerInterface as SMI
'participant searchManager as SM
'entity tournamentManagerInterface as TMI
'participant TournamentManager as TM
'entity notificationManagerInterface as NMI
'participant NotificationManager as NM
'participant Firewall as F
'participant EmailProvider as EP
'actor Invited_Students as U2


'activate U1
'activate FF
'activate WS
'activate SF
'activate AS
'U1 --> FF: Json(inviteStudent(myemail, List<String>emailsToInvite, tournamentName, teamName))
'FF-->WS: analizer(socket, Json): Json
'WS-->SF: verifyLoggedClient(socket)
'SF-->AS: analizer(socket, Json): Json
'AS-->MD: parser(Json): response
'activate MD
'MD-->LMI: logInManager.isLogged(myemail)
'activate LMI
'LMI-->LM: isLogged(myemail)
'deactivate LMI
'activate LM
'alt if Invited Student and Tournament exists
'    LM-->MD: True: the User is logged properly and it is a Student
'    MD-->SMI: Microdispatcher.searchUser(List<String>emailsToInvite)
'    activate SMI
'    SMI-->SM: searchUser(emailsToInvite)
'    deactivate SMI
'    activate SM
'    SM-->MD: List<AccountManager>.count > 0 and List<AccountManager>AccountManager.type == Student
'    deactivate SM
'    activate SMI
'    MD-->SMI: Microdispatcher.searchTournament(tournamentName)
'    SMI-->SM: searchTournament(tournamentName)
'    deactivate SMI
'    activate SM
'    alt Tournament exists
'        SM --> MD: TournamentManager
'        MD --> TMI: Microdispatcher.createTeam(myEmail, List<String> emailsToInvite, teamName)
'        activate TMI
'        TMI --> TM: createTeam(myEmail, List<String> emailsToInvite, teamName)
'        deactivate TMI
'        activate TM
'        alt if Team does not exists
'            TM --> MD: True: Team successufully created
'            MD --> NMI: Microdispatcher.sendNotification(email, description)
'            activate NMI
'            NMI-->NM: sendNotification(email, description)
'            deactivate NMI
'            activate NM
'            NM->F: sendEmail
'            deactivate NM
'            activate F
'            F->EP: sendEmail
'            deactivate F
'            activate EP
'            EP-->U2: Email <<Invitation sent>>
'            deactivate EP
'        else Team yet exists or Invited Student already in the Team
'            TM --> MD: False: Team not created
'            deactivate TM
'            MD-->AS: Invitation NOT send, Invited_Student does NOT exist
'            AS-->WS: Json(Invitation NOT send)
'            WS-->U1: Invitation NOT send
'        end
'    else if Tournament does NOT exists or wrong data
'        SM --> MD: List<<TournamentManager>>.count == 0
'        deactivate SM
'        MD-->AS: Invitation NOT send, Invited_Student does NOT exist
'        AS-->WS: Json(Invitation NOT send)
'        WS-->U1: Invitation NOT send
'    end
'else if Invited Student does not exist or it is not a Student or wrong data
'    LM-->MD: True: the User is logged properly and it is a Student
'    MD-->SMI: Microdispatcher.searchUser(emailToInvite)
'    activate SMI
'    SMI-->SM: searchUser(emailToInvite)
'    deactivate SMI
'    activate SM
'    SM-->MD: AccountManager.type != Student
'    deactivate SM
'    MD-->AS: Invitation NOT send, Invited_Student does NOT exist
'    AS-->WS: Json(Invitation NOT send)
'    WS-->U1: Invitation NOT send
'else if Inviting Student not logged
'    LM-->MD: False: the User is NOT logged properly or it is NOT a Student
'    deactivate LM
'    MD-->AS: Invitation NOT send, User NOT logged properly 
'    deactivate MD
'    AS-->WS: Json(Invitation NOT send)
'    deactivate AS
'    WS-->U1: Invitation NOT send
'end 

actor "Inviting Student" as U1
participant WebServerModule as WS
participant Dispatcher as MD
entity searchInterface as SMI
participant searchManager as SM
entity tournamentInterface as TMI
participant TournamentManager as TM
entity notificationInterface as NMI
participant NotificationManager as NM
participant EmailProvider as EP
actor "Invited Student" as U2
entity dbmsmInterface as DBMI
participant DBMSManager as DBM
entity dbmsInterface as DBI
participant DBMS as DB

U1 -> WS: POST /api\n/inviteStudent
WS -> MD: addStudent(email: String,\n tournamentName: String, team: String): Void
MD -> TMI: addStudent(email: String,\n tournamentName: String, team: String): Void
TMI -> TM: addStudent(email: String,\n tournamentName: String, team: String): Void
TM -> SMI: searchUser(email: String):\n List<User>
SMI -> SM: searchUser(email: String):\n List<User>
SM -> DBMI: searchUser(email: String):\n List<User>
DBMI -> DBM: searchUser(email: String):\n List<User>
DBM -> DBI: searchUser(email: String):\n List<User>
DBI -> DB: searchUser(email: String):\n List<User>
DB --> DBI: List<User>
DBI --> DBM: List<User>
DBM --> DBMI: List<User>
DBMI --> SM: List<User>
SM --> SMI: List<User>
SMI --> TM: List<User>
alt List<User> is not NULL and Student is not just in the Tournament
    TM -> NMI: sendNotification(email: String,\n description: String): Void
    NMI -> NM: sendNotification(email: String,\n description: String): Void
    NM -> EP: send Email with description to email
    EP -> U2: Email <<Invitation sent>>
    alt Student accepts Invitation
        U2 -> WS: POST /api\n/confirm
        WS -> MD: confirm(token: String,\nemail: String): Void
        MD -> NMI: receiveResponse(token: String,\nemail: String): Void
        NMI -> NM: receiveResponse(token: String,\nemail: String): Void
        NM -> TMI: joinStudentTournament(email: String,\n tournamentName: String, team: String): Void
        TMI -> TM: joinStudentTournament(email: String,\n tournamentName: String, team: String): Void
    else Student refuses Invitation
    end
else List<User> is NULL or Student is just in the Tournament
    TM -> NMI: sendNotification(email: String,\n description: String): Void
    NMI -> NM: sendNotification(email: String,\n description: String): Void
    NM -> EP: send Email with description to email
    EP -> U1: Email <<Invitation NOT sent, error occurred>>
end

@enduml