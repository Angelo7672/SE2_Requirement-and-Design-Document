@startuml

'autonumber
'actor User as U
'participant First_Firewall as FF
'participant WebServer as WS
'participant Second_Firewall as SF
'participant Application_Server as AS
'participant Microservices_Dispatcher as MD
'entity signInInterface as SII
'participant SignInManager as SIM
'participant SearchManager as SM
'participant AccountManager as AM
'participant DBMS as D

'activate U
'activate FF
'activate WS
'activate SF
'activate AS
'U-->FF: signIn(Json(Name, Surname, e-mail, password, yearOfBirth, RMPHandler))
'FF-->WS: analizer(socket, Json): Json
'WS-->SF: activeClientAdd(socket)
'SF-->AS: analizer(socket, Json): Json
'AS-->MD: parser(Json): response
'activate MD
'MD-->SII: signInManager.signIn(Name, Surname, e-mail, password, yearOfBirth, RMPHandler)
'activate SII
'SII-->SIM: signIn(Name, Surname, e-mail, password, yearOfBirth, RMPHandler)
'deactivate SII
'activate SIM
'SIM-->SM: searchUser(Name, Surname, e-mail, yearOfBirth): List<Account>
'activate SM
'alt new account 
'    SM-->D: searchQuery
'    activate D
'    D-->SM: Response
'    deactivate D
'    SM-->SIM: List.count == 0 <<Account not found>>
'    SIM-->AM: createAccount(Name, Surname, e-mail, password, yearOfBirth, RMPHandler)
'    activate AM
'    deactivate AM
'    SIM-->MD: Response
'    MD-->AS: Response
'    AS-->WS: Json(Response)
'    WS-->U: Information of successful operation
'else account exists yet or account with same repo
'    SM-->D: searchQuery
'    activate D
'    D-->SM: Response
'    deactivate D
'    SM-->SIM: List.count > 0 <<Account already exists or account with same repo found>>
'    deactivate SM
'    SIM-->MD: Error: account already exists
'    deactivate SIM
'    MD-->AS: Error: account already exists
'    deactivate MD
'    AS-->WS: Json(Error: account already exists)
'    WS-->U: Information of Unsuccessful operation: account already exists
'end
'deactivate U
'deactivate FF
'deactivate WS
'deactivate SF
'deactivate AS

autonumber
actor User as U
participant WebServerModule as WS
participant API
participant Dispatcher as MD
participant SignInManager as SIM
participant NotificationManager as NM
participant DBMS as D

U -> WS : request signIn page
WS -> U : signIn page
U -> WS : signIn()
WS -> MD : signIn()
MD -> SIM : signIn()
SIM -> D : checkAccount()
alt account registered
    D -> SIM : OK
    SIM -> NM : sendNotification()
    NM -> U : send Email
    U -> U : click link in Email
    U -> API : call
    API -> NM : receiveResponse()
    NM -> SIM : confirmAccount()
    SIM -> D : insertAccount()
    D -> D : insertAccount()
else account already registered
    D -> SIM : Error : account already registered
end

@enduml