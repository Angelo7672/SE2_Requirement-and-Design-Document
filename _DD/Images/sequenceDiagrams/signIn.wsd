@startuml

autonumber

actor User as U
participant EmailProvider as EP
participant WebServerModule as WS
participant Controller as C
participant Dispatcher as MD
participant SignInManager as SIM
participant NotificationManager as NM
participant DBMSManager as DBMSM

activate U
U -> WS: POST /api/signIn
activate WS
WS -> C: signIn(name: String, surname: String,\n e-mail: String, password: String,\n rmpHandle: String): Void
deactivate WS
activate C
C -> MD: signIn(name: String, surname: String,\n e-mail: String, password: String,\n rmpHandle: String): Void
deactivate C
activate MD
MD -> SIM: signIn(name: String, surname: String,\n e-mail: String, password: String,\n rmpHandle: String): Void
deactivate MD
activate SIM
SIM -> DBMSM: searchUser(e-mail: String,\n rmpHandle: String): List<User>
activate DBMSM
DBMSM --> SIM: List<User>
deactivate DBMSM
alt List<User> is NULL
    SIM -> NM: sendNotification(email: String,\n text: String): Void
    deactivate SIM
    activate NM
    NM -> EP: send email with text
    deactivate NM
    activate EP
    EP -> U: email <<confirmation email>>
    deactivate EP
    U -> WS: POST /api/confirm
    activate WS
    WS -> C: receiveResponse(token: String,\n email: String)
    deactivate WS
    activate C
    C -> MD: receiveResponse(token: String,\n email: String)
    deactivate C
    activate MD
    MD -> NM: receiveResponse(token: String,\n email: String)
    deactivate MD
    activate NM
    NM -> SIM: createAccount(email: String)
    deactivate NM
    activate SIM
    SIM -> DBMSM: createAccount(Name: String, Surname: String,\nemail: String, password: String,\n RMPHandle: String)
    deactivate SIM
    activate DBMSM
    DBMSM -> DBMSM: insert\n new User
    deactivate DBMSM
else List<User> is not NULL
    SIM --> C: Exception: email/RMPHandle already exists
    activate C
    C --> WS: Exception: email/RMPHandle already exists
    deactivate C
    activate WS
    WS --> U: Exception: email/RMPHandle already exists
    deactivate WS
end

@enduml