@startuml

skinparam linetype polyline

interface controllerInterface{
    + signIn(signInData: SignInData): Boolean
    + createAccount(email: String): Void
    + receiveResponse(response: Response): Void
    + logIn(logInData: LogInData): Session
    + getTournamentData(tournament: Tournament): TournamentData
    + createTeam(team: Team, student: Student): Boolean
    + addEducator(educator: Educator, tournament: Tournament): Void
    + addStudent(student: Student, team: Team): Void
    + updateBattleScore(team: Team, battle: Battle, score: Score): Boolean
    + joinStudentTournament(student: Student, team: Team): Void
    + addNewBattle(battleData: BattleData): Boolean
    + addNewBadge(badgeData: BadgeData): Boolean
    + searchUser(searchQuery: String): Array<UserData>
    + searchTournament(searchQuery: String): Array<TournamentData>
    + newCodeAvailable(repository: RepositoryData): Void
    + getBattleData(battle: BattleData): BattleData
    + getUserData(user: UserData): UserData
    + createTournament(tournamentData: TournamentData): Boolean
    + newCodeAvailable(repository: RepositoryData): Void
}

interface logInManagerInterface{
    + logIn(logInData: LogInData): Session
}

interface signInManagerInterface{
    + signIn(signInData: SignInData): Boolean
    + createAccount(email: String): Void
}

interface RMPManagerInterface{
    + pullRequest(repositoryLink: String): Array<File>
}

interface evaluationManagerInterface{
    + newCodeAvailable(repository: RepositoryData): Void
    + evaluateCriterium(criterium: Criterium, tournament: TournamentData): List<String>
}

interface notificationManagerInterface{
    + sendNotification(notification: Notification): Void 
    + receiveResponse(response: Response): Void
}

interface badgeManagerInterface{
    + evaluateCriteria(badge: BadgeData, tournament: TournamentData): Void
}

interface battleManagerInterface{
    + updateBattleScore(team: Team, battle: Battle, score: Score): Boolean
    + getBattleData(battle: BattleData): BattleData
}

interface tournamentManagerInterface{
    + getTournamentData(tournament: Tournament): TournamentData
    + createTeam(team: Team, student: Student): Boolean
    + addStudent(student: Student, team: Team): Void
    + joinStudentTournament(student: Student, team: Team): Void
    + joinEducatorTournament(educator: Educator, tournament: Tournament): Void
    + addEducator(educator: Educator, tournament: Tournament): Void
    + updateTournamentScore(team: Team, score: Score): Void
    + addNewBattle(battleData: BattleData): Boolean
    + addNewBadge(badgeData: BadgeData): Boolean
    + createTournament(tournamentData: TournamentData): Boolean
}

interface searchManagerInterface{
    + searchUser(searchQuery: String): Array<UserData>
    + searchTournament(searchQuery: String): Array<TournamentData>
}

interface accountManagerInterface{
    + createSession(user: User): Session
    + assignBadge(student: StudentData, badge: BadgeData): Boolean
    + getUserData(user: UserData): UserData
}

interface dispatcherInterface{
    + dispatch(request: String, parameters: Array<String>): Void
    + getData(microserviceName: String): MicroserviceData
}

interface DBMSManagerInterface{
    + query(query: String, args: List<String>): QueryResult
}

evaluationManagerInterface -[hidden]down- dispatcherInterface
signInManagerInterface -[hidden]up- logInManagerInterface
logInManagerInterface -[hidden]right- accountManagerInterface
notificationManagerInterface -[hidden]down- tournamentManagerInterface
controllerInterface -[hidden]up- badgeManagerInterface
evaluationManagerInterface -[hidden]right- controllerInterface
evaluationManagerInterface -[hidden]up- RMPManagerInterface
evaluationManagerInterface -[hidden]down- battleManagerInterface
controllerInterface -[hidden]right- searchManagerInterface

controllerInterface -> signInManagerInterface
signInManagerInterface -> DBMSManagerInterface
signInManagerInterface --> notificationManagerInterface
controllerInterface --> notificationManagerInterface
notificationManagerInterface --> signInManagerInterface

logInManagerInterface <- controllerInterface
logInManagerInterface -> DBMSManagerInterface
logInManagerInterface -> accountManagerInterface

tournamentManagerInterface <- controllerInterface
tournamentManagerInterface --> notificationManagerInterface
tournamentManagerInterface <-- notificationManagerInterface
tournamentManagerInterface --> DBMSManagerInterface

badgeManagerInterface <-- controllerInterface
badgeManagerInterface --> evaluationManagerInterface
evaluationManagerInterface --> RMPManagerInterface
badgeManagerInterface -> accountManagerInterface
badgeManagerInterface --> notificationManagerInterface
accountManagerInterface --> DBMSManagerInterface

evaluationManagerInterface <- controllerInterface
evaluationManagerInterface --> battleManagerInterface
battleManagerInterface --> DBMSManagerInterface
tournamentManagerInterface <-down- battleManagerInterface

controllerInterface --> battleManagerInterface

controllerInterface -> searchManagerInterface
searchManagerInterface --> DBMSManagerInterface

accountManagerInterface <- controllerInterface

@enduml