@startuml

'skinparam linetype polyline

interface controller{
    + signIn(signInData: SignInData): Page
    + receiveResponse(response: Response): Void
    + logIn(logInData: LogInData): Session
    + getTournamentData(tournament: Tournament): Tournament
    + createTeam(team: Team, student: Student): Tournament Page
    + addEducator(educator: Educator, tournament: Tournament): Void
    + addStudent(student: Student, team: Team): Void
}

interface logInManager{
    + logIn(logInData: LogInData): Session
    '+ logOut(String email): Boolean
    '+ isLogged(String email): Boolean
}

interface signInManager{
    + signIn(signInData: SignInData): Void
    + createAccount(email: String): Void
}
interface RMPManager{
    + pullRequest(String repo): String
}
interface evaluationManager{}
interface notificationManager{
    + sendNotification(notification: Notification): Void
    + receiveResponse(response: Response): Void
}
interface badgeManager
interface battleManager{
    + joinBattle(String email, String team): Boolean
    + updateBattleScore(String team, int score): void
}
interface tournamentManager{
    + getTournamentData(tournament: Tournament): Tournament
    + createTeam(team: Team, student: Student): Tournament Page
    + addStudent(student: Student, team: Team): Void
    + joinStudentTournament(student: Student, team: Team): Void
    + joinEducatorTournament(educator: Educator, tournament: Tournament): Void
    + addEducator(educator: Educator, tournament: Tournament): Void
    + updateTournamentScore(String team, int score): void
}
interface searchManager{
    + searchUser(String email, String name, String surname):Array<AccountManager>
    + searchTournament(String tournamentName): Array<TournamentManager>
}
interface accountManager{
    + createSession(user: User): Session
    '+ updateAccount(String name, String surname, String email, String repo): void
}

interface dispatcher{
    + dispatch(request: String, parameters: Array<String>): Void
    + getData(microserviceName: String): MicroserviceData
}

interface DBMSManager{
    + query(query: String, args: List<String>): QueryResult
}



'microserviceDispatcher ---> signInManager: signIn, signOut
'microserviceDispatcher ---> logInManager: logIn, logOut
'microserviceDispatcher ---> accountManager: updateAccount
'microserviceDispatcher ---> tournamentManager: inviteEducator, createTeam, joinStudentTournament, joinEducatorTournament
'microserviceDispatcher ---> battleManager: joinBattle
'signInManager ---> accountManager: deleteAccount
'logInManager ---> searchManager: searchUser
'tournamentManager ---> logInManager: isLogged
'tournamentManager ---> notificationManager: sendNotification
'battleManager ---> logInManager: isLogged
'battleManager ---> notificationManager: sendNotification
'evaluationManager ---> battleManager: updateBattleScore
'evaluationManager ---> tournamentManager: updateTournamentScore
'RMPManager <--- evaluationManager: pullRequest






@enduml